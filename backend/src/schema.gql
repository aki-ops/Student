# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  username: String!
  fullName: String
  password: String!
  role: String!
  classes: [ID!]!
}

type LoginResponse {
  access_token: String!
}

type Score {
  id: ID!
  studentId: String!
  classId: String!
  subject: String!
  score: Int!
}

type Class {
  id: ID!
  subject: String!
  className: String!
  teacher: User
  teacherId: ID!
  students: [User!]
  studentIds: [ID!]!
}

type AttendanceRecord {
  studentId: String!
  status: AttendanceStatus!
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

type Attendance {
  id: ID!
  classId: String!
  date: DateTime!
  records: [AttendanceRecord!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Notification {
  _id: ID!
  message: String!
  sender: ID!
  recipients: [ID!]!
  createdAt: DateTime!
}

input AttendanceRecordInput {
  studentId: String!
  status: AttendanceStatus!
}

type Query {
  find: User!
  findAllUsers: [User!]!
  findById(id: String!): User!
  score(id: Int!): Score!
  getAllScores: [Score!]!
  class: [Class!]!
  getAllClasses: [Class!]!
  getMyClasses: [Class!]!
  getClassById(id: String!): Class!
  attendance: [Attendance!]!
  getAttendanceByClass(classId: String!): [Attendance!]!
  getAttendanceByStudent: [Attendance!]!
  current_User: User!
  findAllUser: User!
  findStudent: String!
  findTeacher: String!
  getMyNotifications: [Notification!]!
}

type Mutation {
  updateUser(input: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createScore(createScoreInput: CreateScoreInput!): Score!
  updateScore(updateScoreInput: UpdateScoreInput!): Score!
  removeScore(id: Int!): Score!
  createClass(createClassInput: CreateClassInput!): Class!
  addStudentToClass(classId: String!, studentId: String!): Class!
  updateClass(updateClassInput: UpdateClassInput!): Class!
  removeClass(id: String!): Class!
  createAttendance(input: CreateAttendanceInput!): Attendance!
  updateAttendance(updateAttendanceInput: UpdateAttendanceInput!): Attendance!
  removeAttendance(id: Int!): Attendance!
  SignIn(input: LoginInput!): LoginResponse!
  CreateUser(input: CreateUserInput!): User!
  createNotification(input: CreateNotificationInput!): Notification!
  removeNotification(id: ID!): Boolean!
}

input UpdateUserInput {
  fullName: String
  username: String
  password: String
  role: UserRole
  id: Int!
}

"""User roles in the system"""
enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

input CreateScoreInput {
  studentId: String!
  classId: String!
  subject: String!
  score: Float!
}

input UpdateScoreInput {
  studentId: String
  classId: String
  subject: String
  score: Float
  id: Int!
}

input CreateClassInput {
  className: String!
  subject: String!
  teacherId: String
}

input UpdateClassInput {
  className: String
  subject: String
  teacherId: String
  id: Int!
}

input CreateAttendanceInput {
  classId: String!
  date: DateTime!
  records: [AttendanceRecordInput!]!
}

input UpdateAttendanceInput {
  id: Int!
}

input LoginInput {
  username: String!
  password: String!
}

input CreateUserInput {
  fullName: String
  username: String!
  password: String!
  role: UserRole!
}

input CreateNotificationInput {
  message: String!
  recipients: [ID!]
}